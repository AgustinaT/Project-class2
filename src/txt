{/*
1)import { useState } from "react";
2)const [idDetail, setIdDetail] = useState(0);
3)console.log(idDetail);
4){<ItemDetailContainer id={idDetail} />}
5)setIdDetail
6)const handleDetail = (id) => {setIdDetail(id)};
7)onClick={()=> handleDetail(id)}
8)setIdDetail
9)setIdDetail={setIdDetail}
10)setIdDetail
11)setIdDetail={setIdDetail}
12)setIdDetail={setIdDetail}
<ItemDetailContainer id={2}/>
`/products.json.${params.productId}`


const [productDetail, setProductDetail] = useState(null) //puede ser un array o objeto dependiendo de la API, pero los detalles suelen ser objetos
  const [error, setError] = useState("")
  console.log(error)

  const params = useParams()
  console.log(params)

  useEffect(() => {
    setTimeout(() => { 
      const getProducts = async () => {
        try {
          const response = await fetch(`/products.json`) 
          const data = await response.json();
          console.log(data)
          const result = data.find(product => product.id == params.productId); //simple
          setProductDetail(result)
        } 
        catch (e) {
          console.log(e.message)
          setError(e.message)
        }
      }
      getProducts();
     }, 2000); 

    
    

    
    
  }, [params])
  




//manga contain er

useEffect(() => {
    setTimeout(() => {
      const getProducts = async () => {
        try {
          const response = await fetch(`/products.json`) 
          const data = await response.json();
          console.log(data)
          setManga(data)
        }
          catch (e) {
            console.log(e.message)
            setError(e.message)
          }
        } 
      getProducts();
     }, 0); 

  }, [])
  let ayuda = "manga"
  useEffect(() => { 
    const productosManga = manga.filter(product => product.categoria === ayuda ); //simple
   setManga(productosManga)
   console.log(manga)
  }, [ayuda])
  

  return ( <h1>hola</h1>
     /*<div>
    {productDetail?<ItemDetail product={productDetail}/>:<p>Cargando mangas, no te vayas!...</p>}
    </div>*/

  }



{/* setTimeout(() => {
      const getProducts = async () => {
        try {
          const response = await fetch(`/products.json`) 
          const data = await response.json();
          console.log(data)
          setManga(data)
        }
          catch (e) {
            console.log(e.message)
            setError(e.message)
          }
        } 
      getProducts();
     }, 0); 

  }, [])
  let ayuda = "manga"
  useEffect(() => { 
    const productosManga = manga.filter(product => product.categoria === ayuda ); //simple
   setManga(productosManga)
   console.log(manga)
  }, [ayuda])




movie container
import React from 'react'
import ItemDetail from '../ItemDetail/ItemDetail'
import { useState, useEffect } from "react";
import {useParams} from 'react-router-dom';


const MovieContainer = () => {
  /* const [productDetail, setProductDetail] = useState(null) //puede ser un array o objeto dependiendo de la API, pero los detalles suelen ser objetos
  const [error, setError] = useState("")
  console.log(error)

  const params = useParams()
  console.log(params)

  useEffect(() => {
    setTimeout(() => { 
      const getProducts = async () => {
        try {
          const response = await fetch(`/products.json`) 
          const data = await response.json();
          console.log(data)
          const result = data.find(product => product.id == params.productId); //simple
          setProductDetail(result)
        } 
        catch (e) {
          console.log(e.message)
          setError(e.message)
        }
      }
      getProducts();
     }, 2000); 

    
    

    
    
  }, [params])
   

  return ( <h1>anda?</h1>
    <div>
    {productDetail?<ItemDetail product={productDetail}/>:<p>Cargando mangas, no te vayas!...</p>}
    </div>
  )
}

export default MovieContainer

*/}





{/*



const ItemListContainer = ({ greeting}) => {
  const [productos, setProductos] = useState([]);
  const [productosFiltrados, setProductosFiltrados] = useState([])

  const params = useParams()

  useEffect(() => {
    const getProductos = async () => {
      try {
        const q = query(collection(db, "products"));
        const querySnapshot = await getDocs(q);
        const productos = []
        querySnapshot.forEach((doc) => {
          // doc.data() is never undefined for query doc snapshots
          // console.log(doc.id, " => ", doc.data());
          productos.push({id: doc.id, ...doc.data()})
        });

        console.log(productos);
        // const response = await fetch('https://fakestoreapi.com/products');
        // const data = await response.json()
        setProductos(productos);
        setProductosFiltrados(productos);
      } catch (error) {
        console.log("Hubo un error:");
        console.log(error);
      }
    }
    getProductos()
  }, [])

  useEffect(() => {
    
  })
      }
    }
  })
}




// ESPACIO EN EL MEDIO







const ItemListContainer = ({ greeting}) => { //10
  const { categoryId } = useParams();
  const [info, setInfo] = useState([]);
  const params = useParams();
  

  const products = [ 
  {id: 1, nombre: "Demon Slayer", precio: "700", descripcion: "Kimetsu no Yaiba, Guardianes de la noche en España, nos presenta a Kamado Tanjiro, un chico joven, bastante inteligente y con un corazón que no le abe en el pecho. Este vive son su familia y gana dinero vendiendo carbón. Pero todo cambia cuando su familia es atacada y asesinada.", imagen: "/demonSlayer.jpg", categoria:"manga" },

  { id: 2, nombre: "Jujutsu Kaisen", "precio": "750", descripcion: "Las emociones negativas creadas por los humanos se convierten en maldiciones y se esconden en la vida cotidiana. Estas maldiciones solo pueden ser exorcizadas.", imagen: "/jujutsukaisen1.jpg", categoria:"manga"},

  { id: 3, nombre: "The Promised Neverland", "precio": "800", descripcion: "The Promised Nerverland es un anime japonés que gira en torno a tres huérfanos (Emma, Norman y Ray) que están esperando a que se les asigne una familia adoptiva. Ellos viven alegres en el orfanato de Grace Field House. Un giro inesperado hace cambiar todo.",  imagen: "/the promised neverland.jpg", categoria:"manga"  },

  { id: 4, nombre: "El Viaje de Chihiro", "precio": "1000", descripcion: "El filme cuenta la historia de una niña de diez años llamada Chihiro, quien durante una mudanza se ve atrapada en un mundo mágico y sobrenatural, teniendo como misión buscar su libertad y la de sus padres, y así poder regresar a su mundo.", imagen: "/chihiro.jpg", categoria:"pelicula"},

  { id: 5, nombre: "Mi vecino Totoro", "precio": "1000", descripcion: "De qué trata 'Mi vecino Totoro' 'Mi vecino Totoro' cuenta la historia de dos niñas, Satsuki y Mei, que se mudan con su padre a una casa que se encuentra cerca del bosque, mientras su madre está recuperándose de tuberculosis en un sanatorio rural",  imagen: "/totoro.jpg", categoria:"pelicula"} ]
    
  

  const task = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(products);
    }, 2000);
  });

  const fetchInfo = async () => {
    try {

      const q = query(collection(db, "products"));

      const querySnapshot = await getDocs(q);
      const productos = []
      querySnapshot.forEach((doc) => {
        // doc.data() is never undefined for query doc snapshots
        // console.log(doc.id, " => ", doc.data());
        productos.push({id: doc.id, ...doc.data()})
      });
      
      console.log(productos);

      setInfo(productos);

      let resolve = await task;
      setInfo(resolve);

    if(params?.categoryId){
    /*Cuando sí solicito una categoría*/
//     const filtrado = resolve.filter( el => el.categoryId === params.categoryId);
//     setInfo(filtrado); /*filtrado*/
//     }else{
//      /*Cuando no pase una categoria*/
//    setInfo(resolve);
//     }

//     } catch (error) {
//       console.log(error);
//     }
//   };

//   useEffect(
//     () => {
//       //lo usamos para hacer llamadas asincronas, el callback que recibe no puede ser asincrono, lo hacemos afuera
//       fetchInfo();
//     },
//     [categoryId, params]
//   );

//   console.log(info);

//   const onAdd = (contador) => {
//     console.log("Se agrego al carrito");
//   };

//   return (
//     <>
//       <div className="item-list-container">
//         <h5>{greeting}</h5>

//         <div className="item-list-cols">
//           <div>
//           <ItemList info={info} /*11*//> 
//             {/*<ItemCount onAdd={onAdd}/>*/}
//           </div>
//         </div>
//       </div>
//     </>
//   );
// };


// */}
}


//   const task = new Promise ((resolve, reject)=> {
//     setTimeout(()=> {
//       resolve(products)
//     }, 2000);
//   });

//   const fetchInfo = async () => {
//     try {
//       let resolve = await task;
//       setDataManga(resolve);

//       if (manga) {
//         const filtrado = resolve.filter((el) => el.categoria === manga); 
//         setDataManga(filtrado);
//       }
//       else {
//         setDataManga(resolve);
//       }
//     } catch (error) {
//       console.log(error); 
//     }
//   };

//   useEffect(() => {
//     fetchInfo(); 
//   }, [manga]);
// console.log(dataManga) }





  // const products = [ 
  // {id: 1, nombre: "Demon Slayer", precio: "700", descripcion: "Kimetsu no Yaiba, Guardianes de la noche en España, nos presenta a Kamado Tanjiro, un chico joven, bastante inteligente y con un corazón que no le abe en el pecho. Este vive son su familia y gana dinero vendiendo carbón. Pero todo cambia cuando su familia es atacada y asesinada.", imagen: "/demonSlayer.jpg", categoria:"manga" },

  // { id: 2, nombre: "Jujutsu Kaisen", "precio": "750", descripcion: "Las emociones negativas creadas por los humanos se convierten en maldiciones y se esconden en la vida cotidiana. Estas maldiciones solo pueden ser exorcizadas.", imagen: "/jujutsukaisen1.jpg", categoria:"manga"},

  // { id: 3, nombre: "The Promised Neverland", "precio": "800", descripcion: "The Promised Nerverland es un anime japonés que gira en torno a tres huérfanos (Emma, Norman y Ray) que están esperando a que se les asigne una familia adoptiva. Ellos viven alegres en el orfanato de Grace Field House. Un giro inesperado hace cambiar todo.",  imagen: "/the promised neverland.jpg", categoria:"manga"  },

  // { id: 4, nombre: "El Viaje de Chihiro", "precio": "1000", descripcion: "El filme cuenta la historia de una niña de diez años llamada Chihiro, quien durante una mudanza se ve atrapada en un mundo mágico y sobrenatural, teniendo como misión buscar su libertad y la de sus padres, y así poder regresar a su mundo.", imagen: "/chihiro.jpg", categoria:"pelicula"},

  // { id: 5, nombre: "Mi vecino Totoro", "precio": "1000", descripcion: "De qué trata 'Mi vecino Totoro' 'Mi vecino Totoro' cuenta la historia de dos niñas, Satsuki y Mei, que se mudan con su padre a una casa que se encuentra cerca del bosque, mientras su madre está recuperándose de tuberculosis en un sanatorio rural",  imagen: "/totoro.jpg", categoria:"pelicula"} ]
    

  // const task = new Promise((resolve, reject) => {
  //   setTimeout(() => {
  //     resolve(products);
  //   }, 2000);
  // });

  // const fetchInfo = async () => {
  //   try {
  //     let resolve = await task;
  //     setInfo(resolve);

  //     if(categoryId){
  //       /*Cuando sí solicito una categoría*/
  //       const filtrado = resolve.filter( el => el.categoryId === categoryId);
  //       setInfo(filtrado);
  //   }else{
  //       /*Cuando no pase una categoria*/
  //       setInfo(resolve);
  //   }

  //   } catch (error) {
  //     console.log(error);
  //   }
  // };

  // useEffect(
  //   () => {
  //     //lo usamos para hacer llamadas asincronas, el callback que recibe no puede ser asincrono, lo hacemos afuera
  //     fetchInfo();
  //   },
  //   [categoryId]
  // );

  // console.log(info);


  
          
          // const response = await fetch(`/products.json`) 
          // const data = await response.json();
          // console.log(data)
          // const result = data.find(product => product.id == params.productId); //simple
          // setProductDetail(result)



//   const task = new Promise ((resolve, reject)=> {
//     setTimeout(()=> {
//       resolve(products)
//     }, 2000);
//   });

//   const fetchInfo = async () => {
//     try {
//       let resolve = await task;
//       setDataMovie(resolve);

//       if (pelicula) {
//         const filtrado = resolve.filter((el) => el.categoria === pelicula); 
//         setDataMovie(filtrado);
//       }
//       else {
//         setDataMovie(resolve);
//       }
//     } catch (error) {
//       console.log(error); 
//     }
//   };

//   useEffect(() => {
//     fetchInfo(); 
//   }, [pelicula]);
// console.log(dataMovie);


// {cart.map(producto => {
  // return <li key={producto.id}>{producto.nombre } <img src={producto.imagen} width='80px' alt={producto.nombre}></img>
  // <span> {producto.quantity}</span>
  // <button className='btn btn-outline-success' onClick = {() => removeItem(producto.id) }> Eliminar </button> <br/>
  // <p>{producto.precio}</p>
  // <div> 
  //  {OneTotalPrice(producto.precio, producto.quantity)} 
  // </div>
  // </li>
  // })}
  // {TotalPrice()}
  // <button className="btn btn-outline-success" onClick={() => back ()}>Finaliza tu compra</button> 


  // Add a new document with a generated id.
// const docRef = await addDoc(collection(db, "orders"), orden);
// console.log("Document written with ID: ", docRef.id);
//lo puedo dejar asi y le agrego el update del stock 

